// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: recorder/v1/services.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/p3yman/solo-recorder/pkg/api/recorder/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RecorderServiceName is the fully-qualified name of the RecorderService service.
	RecorderServiceName = "recorder.v1.RecorderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RecorderServiceStartRecordingProcedure is the fully-qualified name of the RecorderService's
	// StartRecording RPC.
	RecorderServiceStartRecordingProcedure = "/recorder.v1.RecorderService/StartRecording"
	// RecorderServiceStopRecordingProcedure is the fully-qualified name of the RecorderService's
	// StopRecording RPC.
	RecorderServiceStopRecordingProcedure = "/recorder.v1.RecorderService/StopRecording"
	// RecorderServiceStreamStatusProcedure is the fully-qualified name of the RecorderService's
	// StreamStatus RPC.
	RecorderServiceStreamStatusProcedure = "/recorder.v1.RecorderService/StreamStatus"
)

// RecorderServiceClient is a client for the recorder.v1.RecorderService service.
type RecorderServiceClient interface {
	// Start recording
	StartRecording(context.Context, *connect.Request[v1.StartRecordingRequest]) (*connect.Response[v1.StartRecordingResponse], error)
	// Stop recording
	StopRecording(context.Context, *connect.Request[v1.StopRecordingRequest]) (*connect.Response[v1.StopRecordingResponse], error)
	// Stream real-time status updates (mic level, file size, FPS, etc.)
	StreamStatus(context.Context, *connect.Request[v1.StreamStatusRequest]) (*connect.ServerStreamForClient[v1.StreamStatusResponse], error)
}

// NewRecorderServiceClient constructs a client for the recorder.v1.RecorderService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRecorderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RecorderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	recorderServiceMethods := v1.File_recorder_v1_services_proto.Services().ByName("RecorderService").Methods()
	return &recorderServiceClient{
		startRecording: connect.NewClient[v1.StartRecordingRequest, v1.StartRecordingResponse](
			httpClient,
			baseURL+RecorderServiceStartRecordingProcedure,
			connect.WithSchema(recorderServiceMethods.ByName("StartRecording")),
			connect.WithClientOptions(opts...),
		),
		stopRecording: connect.NewClient[v1.StopRecordingRequest, v1.StopRecordingResponse](
			httpClient,
			baseURL+RecorderServiceStopRecordingProcedure,
			connect.WithSchema(recorderServiceMethods.ByName("StopRecording")),
			connect.WithClientOptions(opts...),
		),
		streamStatus: connect.NewClient[v1.StreamStatusRequest, v1.StreamStatusResponse](
			httpClient,
			baseURL+RecorderServiceStreamStatusProcedure,
			connect.WithSchema(recorderServiceMethods.ByName("StreamStatus")),
			connect.WithClientOptions(opts...),
		),
	}
}

// recorderServiceClient implements RecorderServiceClient.
type recorderServiceClient struct {
	startRecording *connect.Client[v1.StartRecordingRequest, v1.StartRecordingResponse]
	stopRecording  *connect.Client[v1.StopRecordingRequest, v1.StopRecordingResponse]
	streamStatus   *connect.Client[v1.StreamStatusRequest, v1.StreamStatusResponse]
}

// StartRecording calls recorder.v1.RecorderService.StartRecording.
func (c *recorderServiceClient) StartRecording(ctx context.Context, req *connect.Request[v1.StartRecordingRequest]) (*connect.Response[v1.StartRecordingResponse], error) {
	return c.startRecording.CallUnary(ctx, req)
}

// StopRecording calls recorder.v1.RecorderService.StopRecording.
func (c *recorderServiceClient) StopRecording(ctx context.Context, req *connect.Request[v1.StopRecordingRequest]) (*connect.Response[v1.StopRecordingResponse], error) {
	return c.stopRecording.CallUnary(ctx, req)
}

// StreamStatus calls recorder.v1.RecorderService.StreamStatus.
func (c *recorderServiceClient) StreamStatus(ctx context.Context, req *connect.Request[v1.StreamStatusRequest]) (*connect.ServerStreamForClient[v1.StreamStatusResponse], error) {
	return c.streamStatus.CallServerStream(ctx, req)
}

// RecorderServiceHandler is an implementation of the recorder.v1.RecorderService service.
type RecorderServiceHandler interface {
	// Start recording
	StartRecording(context.Context, *connect.Request[v1.StartRecordingRequest]) (*connect.Response[v1.StartRecordingResponse], error)
	// Stop recording
	StopRecording(context.Context, *connect.Request[v1.StopRecordingRequest]) (*connect.Response[v1.StopRecordingResponse], error)
	// Stream real-time status updates (mic level, file size, FPS, etc.)
	StreamStatus(context.Context, *connect.Request[v1.StreamStatusRequest], *connect.ServerStream[v1.StreamStatusResponse]) error
}

// NewRecorderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRecorderServiceHandler(svc RecorderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	recorderServiceMethods := v1.File_recorder_v1_services_proto.Services().ByName("RecorderService").Methods()
	recorderServiceStartRecordingHandler := connect.NewUnaryHandler(
		RecorderServiceStartRecordingProcedure,
		svc.StartRecording,
		connect.WithSchema(recorderServiceMethods.ByName("StartRecording")),
		connect.WithHandlerOptions(opts...),
	)
	recorderServiceStopRecordingHandler := connect.NewUnaryHandler(
		RecorderServiceStopRecordingProcedure,
		svc.StopRecording,
		connect.WithSchema(recorderServiceMethods.ByName("StopRecording")),
		connect.WithHandlerOptions(opts...),
	)
	recorderServiceStreamStatusHandler := connect.NewServerStreamHandler(
		RecorderServiceStreamStatusProcedure,
		svc.StreamStatus,
		connect.WithSchema(recorderServiceMethods.ByName("StreamStatus")),
		connect.WithHandlerOptions(opts...),
	)
	return "/recorder.v1.RecorderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RecorderServiceStartRecordingProcedure:
			recorderServiceStartRecordingHandler.ServeHTTP(w, r)
		case RecorderServiceStopRecordingProcedure:
			recorderServiceStopRecordingHandler.ServeHTTP(w, r)
		case RecorderServiceStreamStatusProcedure:
			recorderServiceStreamStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRecorderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRecorderServiceHandler struct{}

func (UnimplementedRecorderServiceHandler) StartRecording(context.Context, *connect.Request[v1.StartRecordingRequest]) (*connect.Response[v1.StartRecordingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.v1.RecorderService.StartRecording is not implemented"))
}

func (UnimplementedRecorderServiceHandler) StopRecording(context.Context, *connect.Request[v1.StopRecordingRequest]) (*connect.Response[v1.StopRecordingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.v1.RecorderService.StopRecording is not implemented"))
}

func (UnimplementedRecorderServiceHandler) StreamStatus(context.Context, *connect.Request[v1.StreamStatusRequest], *connect.ServerStream[v1.StreamStatusResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("recorder.v1.RecorderService.StreamStatus is not implemented"))
}
